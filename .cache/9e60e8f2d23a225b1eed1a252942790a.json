{"dependencies":[{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":1,"column":37}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":2,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":3,"column":39}},{"name":"babel-runtime/helpers/inherits","loc":{"line":4,"column":22}},{"name":"prop-types","loc":{"line":5,"column":22}},{"name":"react","loc":{"line":6,"column":18}},{"name":"classnames","loc":{"line":7,"column":23}},{"name":"react-prop-types/lib/elementType","loc":{"line":8,"column":24}},{"name":"./SafeAnchor","loc":{"line":9,"column":23}},{"name":"./utils/createChainedFunction","loc":{"line":10,"column":34}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _elementType = require(\"react-prop-types/lib/elementType\");\n\nvar _elementType2 = _interopRequireDefault(_elementType);\n\nvar _SafeAnchor = require(\"./SafeAnchor\");\n\nvar _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);\n\nvar _createChainedFunction = require(\"./utils/createChainedFunction\");\n\nvar _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar propTypes = {\n  /**\n   * only here to satisfy linting, just the html onClick handler.\n   *\n   * @private\n   */\n  onClick: _propTypes2.default.func,\n  /**\n   * You can use a custom element for this component\n   */\n  componentClass: _elementType2.default\n};\n\nvar defaultProps = {\n  componentClass: _SafeAnchor2.default\n};\n\nvar contextTypes = {\n  $bs_panel: _propTypes2.default.shape({\n    bodyId: _propTypes2.default.string,\n    onToggle: _propTypes2.default.func,\n    expanded: _propTypes2.default.bool\n  })\n};\n\nvar PanelToggle = function (_React$Component) {\n  (0, _inherits3.default)(PanelToggle, _React$Component);\n\n  function PanelToggle() {\n    (0, _classCallCheck3.default)(this, PanelToggle);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args)));\n\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    return _this;\n  }\n\n  PanelToggle.prototype.handleToggle = function handleToggle(event) {\n    var _ref = this.context.$bs_panel || {},\n        onToggle = _ref.onToggle;\n\n    if (onToggle) {\n      onToggle(event);\n    }\n  };\n\n  PanelToggle.prototype.render = function render() {\n    var _props = this.props,\n        onClick = _props.onClick,\n        className = _props.className,\n        componentClass = _props.componentClass,\n        props = (0, _objectWithoutProperties3.default)(_props, ['onClick', 'className', 'componentClass']);\n\n    var _ref2 = this.context.$bs_panel || {},\n        expanded = _ref2.expanded,\n        bodyId = _ref2.bodyId;\n\n    var Component = componentClass;\n\n    props.onClick = (0, _createChainedFunction2.default)(onClick, this.handleToggle);\n\n    props['aria-expanded'] = expanded;\n    props.className = (0, _classnames2.default)(className, !expanded && 'collapsed');\n\n    if (bodyId) {\n      props['aria-controls'] = bodyId;\n    }\n\n    return _react2.default.createElement(Component, props);\n  };\n\n  return PanelToggle;\n}(_react2.default.Component);\n\nPanelToggle.propTypes = propTypes;\nPanelToggle.defaultProps = defaultProps;\nPanelToggle.contextTypes = contextTypes;\n\nexports.default = PanelToggle;"},"hash":"04bb91761e8da6d89273ad4228d1044d"}